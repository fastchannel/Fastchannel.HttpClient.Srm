name: Build and Publish NuGet Package

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
      - 'v*.*.*-*'

permissions:
  contents: write

jobs:
  build-and-publish:
    runs-on: windows-latest # Use Windows runner for .NET Framework compatibility

    env:
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
      SOLUTION_FILE: ${{ github.workspace }}/Fastchannel.HttpClient.Srm.sln
      CSPROJECT_FILE: ${{ github.workspace }}/src/Fastchannel.HttpClient.Srm/Fastchannel.HttpClient.Srm.csproj

    steps:
      - run: git config --global advice.detachedHead false

      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Extract version from tag using PowerShell
      - name: Extract version from tag
        id: get-version
        shell: pwsh
        run: |
          $tag = $env:GITHUB_REF -replace 'refs/tags/', ''
          if (-not $tag.StartsWith('v')) {
            Write-Host "Building only. Using default Version: 1.0.0"
            echo "VERSION=1.0.0" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8
          } else {
            $version = $tag.Substring(1) # Remove the leading 'v'
            Write-Host "Extracted version: $version"
            echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8
          }

      # Setup DotNet CLI
      - name: Setup DotNet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.x
          cache: true
          cache-dependency-path: src/Fastchannel.HttpClient.Srm/packages.lock.json
      
      # Restore NuGet packages
      - name: Restore NuGet Packages
        run: dotnet restore --locked-mode

      # Build the project using DotNet
      - name: Build Solution
        if: ${{ ! startsWith(github.ref, 'refs/tags/v') }}
        run: dotnet build "${{ env.CSPROJECT_FILE }}" --no-restore --nologo

      # Pack the NuGet package
      - name: Pack NuGet package
        if: startsWith(github.ref, 'refs/tags/v')
        run: dotnet pack "${{ env.CSPROJECT_FILE }}" -o artifacts -c Release -v m -p:Version=${{ env.VERSION }} -p:RepositoryCommit=${{ github.sha }} --no-restore --nologo

      # Configure GitHub Packages repository
      - name: Setup GitHub Packages repository
        if: startsWith(github.ref, 'refs/tags/v')
        run: dotnet nuget add source --username fastchannel --password ${{ secrets.FASTCHANNEL_GITHUB_PAT }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/fastchannel/index.json"

      # Publish packages to GitHub Packages
      - name: Publish packages to GitHub Packages
        if: startsWith(github.ref, 'refs/tags/v')
        working-directory: ./artifacts
        run: dotnet nuget push *.nupkg --api-key ${{ secrets.FASTCHANNEL_GITHUB_PAT }} --source "github" --skip-duplicate

      # Upload both NuGet package and symbols as workflow artifacts
      - name: Upload NuGet Packages as Artifacts
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: NuGetPackages
          path: artifacts/*.nupkg
          if-no-files-found: error
          compression-level: 0

      # Create a GitHub release
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: Srm SDK ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
          files: artifacts/*.nupkg
          body: |
            This release contains the latest build of the Srm SDK for the .NET Standard 2.0 class library.
          draft: false
          prerelease: false
          make_latest: true
          generate_release_notes: true